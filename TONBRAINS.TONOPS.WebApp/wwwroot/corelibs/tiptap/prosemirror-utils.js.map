{"version":3,"file":"index.js","sources":["../src/transforms.js","../src/helpers.js","../src/selection.js","../src/node.js","../src/table.js"],"sourcesContent":["import { NodeSelection, Selection } from './libs/tipTap/prosemirror-state.js';\nimport { findParentNodeOfType, findPositionOfNodeBefore } from './selection';\nimport {\n  cloneTr,\n  isNodeSelection,\n  replaceNodeAtPos,\n  removeNodeAtPos,\n  canInsert,\n  isEmptyParagraph\n} from './helpers';\n\n// :: (nodeType: union<NodeType, [NodeType]>) → (tr: Transaction) → Transaction\n// Returns a new transaction that removes a node of a given `nodeType`. It will return an original transaction if parent node hasn't been found.\n//\n// ```javascript\n// dispatch(\n//   removeParentNodeOfType(schema.nodes.table)(tr)\n// );\n// ```\nexport const removeParentNodeOfType = nodeType => tr => {\n  const parent = findParentNodeOfType(nodeType)(tr.selection);\n  if (parent) {\n    return removeNodeAtPos(parent.pos)(tr);\n  }\n  return tr;\n};\n\n// :: (nodeType: union<NodeType, [NodeType]>, content: union<ProseMirrorNode, Fragment>) → (tr: Transaction) → Transaction\n// Returns a new transaction that replaces parent node of a given `nodeType` with the given `content`. It will return an original transaction if either parent node hasn't been found or replacing is not possible.\n//\n// ```javascript\n// const node = schema.nodes.paragraph.createChecked({}, schema.text('new'));\n//\n// dispatch(\n//  replaceParentNodeOfType(schema.nodes.table, node)(tr)\n// );\n// ```\nexport const replaceParentNodeOfType = (nodeType, content) => tr => {\n  if (!Array.isArray(nodeType)) {\n    nodeType = [nodeType];\n  }\n  for (let i = 0, count = nodeType.length; i < count; i++) {\n    const parent = findParentNodeOfType(nodeType[i])(tr.selection);\n    if (parent) {\n      const newTr = replaceNodeAtPos(parent.pos, content)(tr);\n      if (newTr !== tr) {\n        return newTr;\n      }\n    }\n  }\n  return tr;\n};\n\n// :: (tr: Transaction) → Transaction\n// Returns a new transaction that removes selected node. It will return an original transaction if current selection is not a `NodeSelection`.\n//\n// ```javascript\n// dispatch(\n//   removeSelectedNode(tr)\n// );\n// ```\nexport const removeSelectedNode = tr => {\n  if (isNodeSelection(tr.selection)) {\n    const from = tr.selection.$from.pos;\n    const to = tr.selection.$to.pos;\n    return cloneTr(tr.delete(from, to));\n  }\n  return tr;\n};\n\n// :: (node: ProseMirrorNode) → (tr: Transaction) → Transaction\n// Returns a new transaction that replaces selected node with a given `node`.\n// It will return the original transaction if either current selection is not a NodeSelection or replacing is not possible.\n//\n// ```javascript\n// const node = schema.nodes.paragraph.createChecked({}, schema.text('new'));\n// dispatch(\n//   replaceSelectedNode(node)(tr)\n// );\n// ```\nexport const replaceSelectedNode = node => tr => {\n  if (isNodeSelection(tr.selection)) {\n    const { $from, $to } = tr.selection;\n    if (\n      $from.parent.canReplaceWith($from.index(), $from.indexAfter(), node.type)\n    ) {\n      return cloneTr(tr.replaceWith($from.pos, $to.pos, node));\n    }\n  }\n  return tr;\n};\n\n// :: (position: number, dir: ?number) → (tr: Transaction) → Transaction\n// Returns a new transaction that tries to find a valid cursor selection starting at the given `position`\n// and searching back if `dir` is negative, and forward if positive.\n// If a valid cursor position hasn't been found, it will return the original transaction.\n//\n// ```javascript\n// dispatch(\n//   setTextSelection(5)(tr)\n// );\n// ```\nexport const setTextSelection = (position, dir = 1) => tr => {\n  const nextSelection = Selection.findFrom(tr.doc.resolve(position), dir, true);\n  if (nextSelection) {\n    return tr.setSelection(nextSelection);\n  }\n  return tr;\n};\n\n// :: (content: union<ProseMirrorNode, Fragment>, position: ?number) → (tr: Transaction) → Transaction\n// Returns a new transaction that inserts a given `content` at the current cursor position, or at a given `position`, if it is allowed by schema. If schema restricts such nesting, it will try to find an appropriate place for a given node in the document, looping through parent nodes up until the root document node.\n// If cursor is inside of an empty paragraph, it will try to replace that paragraph with the given content. If insertion is successful and inserted node has content, it will set cursor inside of that content.\n// It will return an original transaction if the place for insertion hasn't been found.\n//\n// ```javascript\n// const node = schema.nodes.extension.createChecked({});\n// dispatch(\n//   safeInsert(node)(tr)\n// );\n// ```\nexport const safeInsert = (content, position) => tr => {\n  const hasPosition = typeof position === 'number';\n  const { $from } = tr.selection;\n  const $insertPos = hasPosition\n    ? tr.doc.resolve(position)\n    : isNodeSelection(tr.selection)\n      ? tr.doc.resolve($from.pos + 1)\n      : $from;\n  const { parent, depth } = $insertPos;\n\n  // try to replace an empty paragraph\n  if (isEmptyParagraph(parent)) {\n    const oldTr = tr;\n    tr = replaceParentNodeOfType(parent.type, content)(tr);\n    if (oldTr !== tr) {\n      return setTextSelection($insertPos.pos)(tr);\n    }\n  }\n\n  // given node is allowed at the current cursor position\n  if (canInsert($insertPos, content)) {\n    tr.insert($insertPos.pos, content);\n    return cloneTr(\n      setTextSelection(hasPosition ? $insertPos.pos : tr.selection.$anchor.pos)(\n        tr\n      )\n    );\n  }\n\n  // looking for a place in the doc where the node is allowed\n  for (let i = $insertPos.depth; i > 0; i--) {\n    const pos = $insertPos.after(i);\n    const $pos = tr.doc.resolve(pos);\n    if (canInsert($pos, content)) {\n      tr.insert(pos, content);\n      return cloneTr(setTextSelection(pos)(tr));\n    }\n  }\n  return tr;\n};\n\n// :: (nodeType: union<NodeType, [NodeType]>, type: ?union<NodeType, null>, attrs: ?union<Object, null>, marks?: [Mark]) → (tr: Transaction) → Transaction\n// Returns a transaction that changes the type, attributes, and/or marks of the parent node of a given `nodeType`.\n//\n// ```javascript\n// const node = schema.nodes.extension.createChecked({});\n// dispatch(\n//   setParentNodeMarkup(schema.nodes.panel, null, { panelType })(tr);\n// );\n// ```\nexport const setParentNodeMarkup = (nodeType, type, attrs, marks) => tr => {\n  const parent = findParentNodeOfType(nodeType)(tr.selection);\n  if (parent) {\n    return cloneTr(\n      tr.setNodeMarkup(\n        parent.pos,\n        type,\n        Object.assign({}, parent.node.attrs, attrs),\n        marks\n      )\n    );\n  }\n  return tr;\n};\n\n// :: (nodeType: union<NodeType, [NodeType]>) → (tr: Transaction) → Transaction\n// Returns a new transaction that sets a `NodeSelection` on a parent node of a `given nodeType`.\n//\n// ```javascript\n// dispatch(\n//   selectParentNodeOfType([tableCell, tableHeader])(state.tr)\n// );\n// ```\nexport const selectParentNodeOfType = nodeType => tr => {\n  if (!isNodeSelection(tr.selection)) {\n    const parent = findParentNodeOfType(nodeType)(tr.selection);\n    if (parent) {\n      return cloneTr(tr.setSelection(NodeSelection.create(tr.doc, parent.pos)));\n    }\n  }\n  return tr;\n};\n\n// :: (tr: Transaction) → Transaction\n// Returns a new transaction that deletes previous node.\n//\n// ```javascript\n// dispatch(\n//   removeNodeBefore(state.tr)\n// );\n// ```\nexport const removeNodeBefore = tr => {\n  const position = findPositionOfNodeBefore(tr.selection);\n  if (typeof position === 'number') {\n    return removeNodeAtPos(position)(tr);\n  }\n  return tr;\n};\n","import { NodeSelection } from './libs/tipTap/prosemirror-state.js';\nimport { Fragment, Node as PMNode } from './libs/tipTap/prosemirror-model.js';\nimport { TableMap } from './libs/tipTap/prosemirror-tables.js';\nimport { setTextSelection } from './transforms';\nimport { findParentNodeClosestToPos } from './selection';\n\n// :: (selection: Selection) → boolean\n// Checks if current selection is a `NodeSelection`.\n//\n// ```javascript\n// if (isNodeSelection(tr.selection)) {\n//   // ...\n// }\n// ```\nexport const isNodeSelection = selection => {\n  return selection instanceof NodeSelection;\n};\n\n// (nodeType: union<NodeType, [NodeType]>) → boolean\n// Checks if the type a given `node` equals to a given `nodeType`.\nexport const equalNodeType = (nodeType, node) => {\n  return (\n    (Array.isArray(nodeType) && nodeType.indexOf(node.type) > -1) ||\n    node.type === nodeType\n  );\n};\n\n// (tr: Transaction) → Transaction\n// Creates a new transaction object from a given transaction\nexport const cloneTr = tr => {\n  return Object.assign(Object.create(tr), tr).setTime(Date.now());\n};\n\n// (position: number, content: union<ProseMirrorNode, Fragment>) → (tr: Transaction) → Transaction\n// Returns a `replace` transaction that replaces a node at a given position with the given `content`.\n// It will return the original transaction if replacing is not possible.\n// `position` should point at the position immediately before the node.\nexport const replaceNodeAtPos = (position, content) => tr => {\n  const node = tr.doc.nodeAt(position);\n  const $pos = tr.doc.resolve(position);\n  if (canReplace($pos, content)) {\n    tr = tr.replaceWith(position, position + node.nodeSize, content);\n    const start = tr.selection.$from.pos - 1;\n    // put cursor inside of the inserted node\n    tr = setTextSelection(Math.max(start, 0), -1)(tr);\n    // move cursor to the start of the node\n    tr = setTextSelection(tr.selection.$from.start())(tr);\n    return cloneTr(tr);\n  }\n  return tr;\n};\n\n// ($pos: ResolvedPos, doc: ProseMirrorNode, content: union<ProseMirrorNode, Fragment>, ) → boolean\n// Checks if replacing a node at a given `$pos` inside of the `doc` node with the given `content` is possible.\nexport const canReplace = ($pos, content) => {\n  const node = $pos.node($pos.depth);\n  return (\n    node &&\n    node.type.validContent(\n      content instanceof Fragment ? content : Fragment.from(content)\n    )\n  );\n};\n\n// (position: number) → (tr: Transaction) → Transaction\n// Returns a `delete` transaction that removes a node at a given position with the given `node`.\n// `position` should point at the position immediately before the node.\nexport const removeNodeAtPos = position => tr => {\n  const node = tr.doc.nodeAt(position);\n  return cloneTr(tr.delete(position, position + node.nodeSize));\n};\n\n// (schema: Schema) → {[key: string]: NodeType}\n// Returns a map where keys are tableRoles and values are NodeTypes.\nexport const tableNodeTypes = schema => {\n  if (schema.cached.tableNodeTypes) {\n    return schema.cached.tableNodeTypes;\n  }\n  const roles = {};\n  Object.keys(schema.nodes).forEach(type => {\n    const nodeType = schema.nodes[type];\n    if (nodeType.spec.tableRole) {\n      roles[nodeType.spec.tableRole] = nodeType;\n    }\n  });\n  schema.cached.tableNodeTypes = roles;\n  return roles;\n};\n\n// :: ($pos: ResolvedPos, content: union<ProseMirrorNode, Fragment>) → boolean\n// Checks if a given `content` can be inserted at the given `$pos`\n//\n// ```javascript\n// const { selection: { $from } } = state;\n// const node = state.schema.nodes.atom.createChecked();\n// if (canInsert($from, node)) {\n//   // ...\n// }\n// ```\nexport const canInsert = ($pos, content) => {\n  const index = $pos.index();\n\n  if (content instanceof Fragment) {\n    return $pos.parent.canReplace(index, index, content);\n  } else if (content instanceof PMNode) {\n    return $pos.parent.canReplaceWith(index, index, content.type);\n  }\n  return false;\n};\n\n// (node: ProseMirrorNode) → boolean\n// Checks if a given `node` is an empty paragraph\nexport const isEmptyParagraph = node => {\n  return !node || (node.type.name === 'paragraph' && node.nodeSize === 2);\n};\n\n// ($pos: ResolvedPos) → ?{pos: number, start: number, node: ProseMirrorNode}\n// Iterates over parent nodes, returning a table node closest to a given `$pos`.\n//\n// ```javascript\n// const table = findTableClosestToPos(state.doc.resolve(10));\n// ```\nexport const findTableClosestToPos = $pos => {\n  const predicate = node =>\n    node.type.spec.tableRole && /table/i.test(node.type.spec.tableRole);\n  return findParentNodeClosestToPos($pos, predicate);\n};\n\nexport const createCell = (cellType, cellContent = null) => {\n  if (cellContent) {\n    return cellType.createChecked(null, cellContent);\n  }\n\n  return cellType.createAndFill();\n};\n\n// (rect: {left: number, right: number, top: number, bottom: number}) → (selection: Selection) → boolean\n// Checks if a given CellSelection rect is selected\nexport const isRectSelected = rect => selection => {\n  const map = TableMap.get(selection.$anchorCell.node(-1));\n  const start = selection.$anchorCell.start(-1);\n  const cells = map.cellsInRect(rect);\n  const selectedCells = map.cellsInRect(\n    map.rectBetween(\n      selection.$anchorCell.pos - start,\n      selection.$headCell.pos - start\n    )\n  );\n\n  for (let i = 0, count = cells.length; i < count; i++) {\n    if (selectedCells.indexOf(cells[i]) === -1) {\n      return false;\n    }\n  }\n\n  return true;\n};\n","import { Selection } from './libs/tipTap/prosemirror-state.js';\nimport { equalNodeType, isNodeSelection } from './helpers';\n\n// :: (predicate: (node: ProseMirrorNode) → boolean) → (selection: Selection) → ?{pos: number, start: number, depth: number, node: ProseMirrorNode}\n// Iterates over parent nodes, returning the closest node and its start position `predicate` returns truthy for. `start` points to the start position of the node, `pos` points directly before the node.\n//\n// ```javascript\n// const predicate = node => node.type === schema.nodes.blockquote;\n// const parent = findParentNode(predicate)(selection);\n// ```\nexport const findParentNode = predicate => ({ $from }) =>\n  findParentNodeClosestToPos($from, predicate);\n\n// :: ($pos: ResolvedPos, predicate: (node: ProseMirrorNode) → boolean) → ?{pos: number, start: number, depth: number, node: ProseMirrorNode}\n// Iterates over parent nodes starting from the given `$pos`, returning the closest node and its start position `predicate` returns truthy for. `start` points to the start position of the node, `pos` points directly before the node.\n//\n// ```javascript\n// const predicate = node => node.type === schema.nodes.blockquote;\n// const parent = findParentNodeClosestToPos(state.doc.resolve(5), predicate);\n// ```\nexport const findParentNodeClosestToPos = ($pos, predicate) => {\n  for (let i = $pos.depth; i > 0; i--) {\n    const node = $pos.node(i);\n    if (predicate(node)) {\n      return {\n        pos: i > 0 ? $pos.before(i) : 0,\n        start: $pos.start(i),\n        depth: i,\n        node\n      };\n    }\n  }\n};\n\n// :: (predicate: (node: ProseMirrorNode) → boolean, domAtPos: (pos: number) → {node: dom.Node, offset: number}) → (selection: Selection) → ?dom.Node\n// Iterates over parent nodes, returning DOM reference of the closest node `predicate` returns truthy for.\n//\n// ```javascript\n// const domAtPos = view.domAtPos.bind(view);\n// const predicate = node => node.type === schema.nodes.table;\n// const parent = findParentDomRef(predicate, domAtPos)(selection); // <table>\n// ```\nexport const findParentDomRef = (predicate, domAtPos) => selection => {\n  const parent = findParentNode(predicate)(selection);\n  if (parent) {\n    return findDomRefAtPos(parent.pos, domAtPos);\n  }\n};\n\n// :: (predicate: (node: ProseMirrorNode) → boolean) → (selection: Selection) → boolean\n// Checks if there's a parent node `predicate` returns truthy for.\n//\n// ```javascript\n// if (hasParentNode(node => node.type === schema.nodes.table)(selection)) {\n//   // ....\n// }\n// ```\nexport const hasParentNode = predicate => selection => {\n  return !!findParentNode(predicate)(selection);\n};\n\n// :: (nodeType: union<NodeType, [NodeType]>) → (selection: Selection) → ?{pos: number, start: number, depth: number, node: ProseMirrorNode}\n// Iterates over parent nodes, returning closest node of a given `nodeType`. `start` points to the start position of the node, `pos` points directly before the node.\n//\n// ```javascript\n// const parent = findParentNodeOfType(schema.nodes.paragraph)(selection);\n// ```\nexport const findParentNodeOfType = nodeType => selection => {\n  return findParentNode(node => equalNodeType(nodeType, node))(selection);\n};\n\n// :: ($pos: ResolvedPos, nodeType: union<NodeType, [NodeType]>) → ?{pos: number, start: number, depth: number, node: ProseMirrorNode}\n// Iterates over parent nodes starting from the given `$pos`, returning closest node of a given `nodeType`. `start` points to the start position of the node, `pos` points directly before the node.\n//\n// ```javascript\n// const parent = findParentNodeOfTypeClosestToPos(state.doc.resolve(10), schema.nodes.paragraph);\n// ```\nexport const findParentNodeOfTypeClosestToPos = ($pos, nodeType) => {\n  return findParentNodeClosestToPos($pos, node =>\n    equalNodeType(nodeType, node)\n  );\n};\n\n// :: (nodeType: union<NodeType, [NodeType]>) → (selection: Selection) → boolean\n// Checks if there's a parent node of a given `nodeType`.\n//\n// ```javascript\n// if (hasParentNodeOfType(schema.nodes.table)(selection)) {\n//   // ....\n// }\n// ```\nexport const hasParentNodeOfType = nodeType => selection => {\n  return hasParentNode(node => equalNodeType(nodeType, node))(selection);\n};\n\n// :: (nodeType: union<NodeType, [NodeType]>, domAtPos: (pos: number) → {node: dom.Node, offset: number}) → (selection: Selection) → ?dom.Node\n// Iterates over parent nodes, returning DOM reference of the closest node of a given `nodeType`.\n//\n// ```javascript\n// const domAtPos = view.domAtPos.bind(view);\n// const parent = findParentDomRefOfType(schema.nodes.codeBlock, domAtPos)(selection); // <pre>\n// ```\nexport const findParentDomRefOfType = (nodeType, domAtPos) => selection => {\n  return findParentDomRef(node => equalNodeType(nodeType, node), domAtPos)(\n    selection\n  );\n};\n\n// :: (nodeType: union<NodeType, [NodeType]>) → (selection: Selection) → ?{pos: number, start: number, depth: number, node: ProseMirrorNode}\n// Returns a node of a given `nodeType` if it is selected. `start` points to the start position of the node, `pos` points directly before the node.\n//\n// ```javascript\n// const { extension, inlineExtension, bodiedExtension } = schema.nodes;\n// const selectedNode = findSelectedNodeOfType([\n//   extension,\n//   inlineExtension,\n//   bodiedExtension,\n// ])(selection);\n// ```\nexport const findSelectedNodeOfType = nodeType => selection => {\n  if (isNodeSelection(selection)) {\n    const { node, $from } = selection;\n    if (equalNodeType(nodeType, node)) {\n      return { node, pos: $from.pos, depth: $from.depth };\n    }\n  }\n};\n\n// :: (selection: Selection) → ?number\n// Returns position of the previous node.\n//\n// ```javascript\n// const pos = findPositionOfNodeBefore(tr.selection);\n// ```\nexport const findPositionOfNodeBefore = selection => {\n  const { nodeBefore } = selection.$from;\n  const maybeSelection = Selection.findFrom(selection.$from, -1);\n  if (maybeSelection && nodeBefore) {\n    // leaf node\n    const parent = findParentNodeOfType(nodeBefore.type)(maybeSelection);\n    if (parent) {\n      return parent.pos;\n    }\n    return maybeSelection.$from.pos;\n  }\n};\n\n// :: (position: number, domAtPos: (pos: number) → {node: dom.Node, offset: number}) → dom.Node\n// Returns DOM reference of a node at a given `position`. If the node type is of type `TEXT_NODE` it will return the reference of the parent node.\n//\n// ```javascript\n// const domAtPos = view.domAtPos.bind(view);\n// const ref = findDomRefAtPos($from.pos, domAtPos);\n// ```\nexport const findDomRefAtPos = (position, domAtPos) => {\n  const dom = domAtPos(position);\n  const node = dom.node.childNodes[dom.offset];\n\n  if (dom.node.nodeType === Node.TEXT_NODE) {\n    return dom.node.parentNode;\n  }\n\n  if (!node || node.nodeType === Node.TEXT_NODE) {\n    return dom.node;\n  }\n\n  return node;\n};\n","// :: (node: ProseMirrorNode, descend: ?boolean) → [{ node: ProseMirrorNode, pos: number }]\n// Flattens descendants of a given `node`. It doesn't descend into a node when descend argument is `false` (defaults to `true`).\n//\n// ```javascript\n// const children = flatten(node);\n// ```\nexport const flatten = (node, descend = true) => {\n  if (!node) {\n    throw new Error('Invalid \"node\" parameter');\n  }\n  const result = [];\n  node.descendants((child, pos) => {\n    result.push({ node: child, pos });\n    if (!descend) {\n      return false;\n    }\n  });\n  return result;\n};\n\n// :: (node: ProseMirrorNode, predicate: (node: ProseMirrorNode) → boolean, descend: ?boolean) → [{ node: ProseMirrorNode, pos: number }]\n// Iterates over descendants of a given `node`, returning child nodes predicate returns truthy for. It doesn't descend into a node when descend argument is `false` (defaults to `true`).\n//\n// ```javascript\n// const textNodes = findChildren(node, child => child.isText, false);\n// ```\nexport const findChildren = (node, predicate, descend) => {\n  if (!node) {\n    throw new Error('Invalid \"node\" parameter');\n  } else if (!predicate) {\n    throw new Error('Invalid \"predicate\" parameter');\n  }\n  return flatten(node, descend).filter(child => predicate(child.node));\n};\n\n// :: (node: ProseMirrorNode, descend: ?boolean) → [{ node: ProseMirrorNode, pos: number }]\n// Returns text nodes of a given `node`. It doesn't descend into a node when descend argument is `false` (defaults to `true`).\n//\n// ```javascript\n// const textNodes = findTextNodes(node);\n// ```\nexport const findTextNodes = (node, descend) => {\n  return findChildren(node, child => child.isText, descend);\n};\n\n// :: (node: ProseMirrorNode, descend: ?boolean) → [{ node: ProseMirrorNode, pos: number }]\n// Returns inline nodes of a given `node`. It doesn't descend into a node when descend argument is `false` (defaults to `true`).\n//\n// ```javascript\n// const inlineNodes = findInlineNodes(node);\n// ```\nexport const findInlineNodes = (node, descend) => {\n  return findChildren(node, child => child.isInline, descend);\n};\n\n// :: (node: ProseMirrorNode, descend: ?boolean) → [{ node: ProseMirrorNode, pos: number }]\n// Returns block descendants of a given `node`. It doesn't descend into a node when descend argument is `false` (defaults to `true`).\n//\n// ```javascript\n// const blockNodes = findBlockNodes(node);\n// ```\nexport const findBlockNodes = (node, descend) => {\n  return findChildren(node, child => child.isBlock, descend);\n};\n\n// :: (node: ProseMirrorNode, predicate: (attrs: ?Object) → boolean, descend: ?boolean) → [{ node: ProseMirrorNode, pos: number }]\n// Iterates over descendants of a given `node`, returning child nodes predicate returns truthy for. It doesn't descend into a node when descend argument is `false` (defaults to `true`).\n//\n// ```javascript\n// const mergedCells = findChildrenByAttr(table, attrs => attrs.colspan === 2);\n// ```\nexport const findChildrenByAttr = (node, predicate, descend) => {\n  return findChildren(node, child => !!predicate(child.attrs), descend);\n};\n\n// :: (node: ProseMirrorNode, nodeType: NodeType, descend: ?boolean) → [{ node: ProseMirrorNode, pos: number }]\n// Iterates over descendants of a given `node`, returning child nodes of a given nodeType. It doesn't descend into a node when descend argument is `false` (defaults to `true`).\n//\n// ```javascript\n// const cells = findChildrenByType(table, schema.nodes.tableCell);\n// ```\nexport const findChildrenByType = (node, nodeType, descend) => {\n  return findChildren(node, child => child.type === nodeType, descend);\n};\n\n// :: (node: ProseMirrorNode, markType: markType, descend: ?boolean) → [{ node: ProseMirrorNode, pos: number }]\n// Iterates over descendants of a given `node`, returning child nodes that have a mark of a given markType. It doesn't descend into a `node` when descend argument is `false` (defaults to `true`).\n//\n// ```javascript\n// const nodes = findChildrenByMark(state.doc, schema.marks.strong);\n// ```\nexport const findChildrenByMark = (node, markType, descend) => {\n  return findChildren(node, child => markType.isInSet(child.marks), descend);\n};\n\n// :: (node: ProseMirrorNode, nodeType: NodeType) → boolean\n// Returns `true` if a given node contains nodes of a given `nodeType`\n//\n// ```javascript\n// if (contains(panel, schema.nodes.listItem)) {\n//   // ...\n// }\n// ```\nexport const contains = (node, nodeType) => {\n  return !!findChildrenByType(node, nodeType).length;\n};\n","import {\n  CellSelection,\n  TableMap,\n  addColumn,\n  addRow,\n  removeColumn,\n  removeRow\n} from './libs/tipTap/prosemirror-tables.js';\nimport { Selection } from './libs/tipTap/prosemirror-state.js';\nimport { Slice } from './libs/tipTap/prosemirror-model.js';\nimport { findParentNode, findParentNodeClosestToPos } from './selection';\nimport { setTextSelection, safeInsert } from './transforms';\nimport {\n  cloneTr,\n  tableNodeTypes,\n  findTableClosestToPos,\n  createCell,\n  isRectSelected\n} from './helpers';\n\n// :: (selection: Selection) → ?{pos: number, start: number, node: ProseMirrorNode}\n// Iterates over parent nodes, returning the closest table node.\n//\n// ```javascript\n// const table = findTable(selection);\n// ```\nexport const findTable = selection =>\n  findParentNode(\n    node => node.type.spec.tableRole && node.type.spec.tableRole === 'table'\n  )(selection);\n\n// :: (selection: Selection) → boolean\n// Checks if current selection is a `CellSelection`.\n//\n// ```javascript\n// if (isCellSelection(selection)) {\n//   // ...\n// }\n// ```\nexport const isCellSelection = selection => {\n  return selection instanceof CellSelection;\n};\n\n// :: (selection: Selection) → ?{left: number, right: number, top: number, bottom: number}\n// Get the selection rectangle. Returns `undefined` if selection is not a CellSelection.\n//\n// ```javascript\n// const rect = getSelectionRect(selection);\n// ```\nexport const getSelectionRect = selection => {\n  if (!isCellSelection(selection)) {\n    return;\n  }\n  const start = selection.$anchorCell.start(-1);\n  const map = TableMap.get(selection.$anchorCell.node(-1));\n  return map.rectBetween(\n    selection.$anchorCell.pos - start,\n    selection.$headCell.pos - start\n  );\n};\n\n// :: (columnIndex: number) → (selection: Selection) → boolean\n// Checks if entire column at index `columnIndex` is selected.\n//\n// ```javascript\n// const className = isColumnSelected(i)(selection) ? 'selected' : '';\n// ```\nexport const isColumnSelected = columnIndex => selection => {\n  if (isCellSelection(selection)) {\n    const map = TableMap.get(selection.$anchorCell.node(-1));\n    return isRectSelected({\n      left: columnIndex,\n      right: columnIndex + 1,\n      top: 0,\n      bottom: map.height\n    })(selection);\n  }\n\n  return false;\n};\n\n// :: (rowIndex: number) → (selection: Selection) → boolean\n// Checks if entire row at index `rowIndex` is selected.\n//\n// ```javascript\n// const className = isRowSelected(i)(selection) ? 'selected' : '';\n// ```\nexport const isRowSelected = rowIndex => selection => {\n  if (isCellSelection(selection)) {\n    const map = TableMap.get(selection.$anchorCell.node(-1));\n    return isRectSelected({\n      left: 0,\n      right: map.width,\n      top: rowIndex,\n      bottom: rowIndex + 1\n    })(selection);\n  }\n\n  return false;\n};\n\n// :: (selection: Selection) → boolean\n// Checks if entire table is selected\n//\n// ```javascript\n// const className = isTableSelected(selection) ? 'selected' : '';\n// ```\nexport const isTableSelected = selection => {\n  if (isCellSelection(selection)) {\n    const map = TableMap.get(selection.$anchorCell.node(-1));\n    return isRectSelected({\n      left: 0,\n      right: map.width,\n      top: 0,\n      bottom: map.height\n    })(selection);\n  }\n\n  return false;\n};\n\n// :: (columnIndex: union<number, [number]>) → (selection: Selection) → ?[{pos: number, start: number, node: ProseMirrorNode}]\n// Returns an array of cells in a column(s), where `columnIndex` could be a column index or an array of column indexes.\n//\n// ```javascript\n// const cells = getCellsInColumn(i)(selection); // [{node, pos}, {node, pos}]\n// ```\nexport const getCellsInColumn = columnIndex => selection => {\n  const table = findTable(selection);\n  if (table) {\n    const map = TableMap.get(table.node);\n    const indexes = Array.isArray(columnIndex)\n      ? columnIndex\n      : Array.from([columnIndex]);\n    return indexes.reduce((acc, index) => {\n      if (index >= 0 && index <= map.width - 1) {\n        const cells = map.cellsInRect({\n          left: index,\n          right: index + 1,\n          top: 0,\n          bottom: map.height\n        });\n        return acc.concat(\n          cells.map(nodePos => {\n            const node = table.node.nodeAt(nodePos);\n            const pos = nodePos + table.start;\n            return { pos, start: pos + 1, node };\n          })\n        );\n      }\n    }, []);\n  }\n};\n\n// :: (rowIndex: union<number, [number]>) → (selection: Selection) → ?[{pos: number, start: number, node: ProseMirrorNode}]\n// Returns an array of cells in a row(s), where `rowIndex` could be a row index or an array of row indexes.\n//\n// ```javascript\n// const cells = getCellsInRow(i)(selection); // [{node, pos}, {node, pos}]\n// ```\nexport const getCellsInRow = rowIndex => selection => {\n  const table = findTable(selection);\n  if (table) {\n    const map = TableMap.get(table.node);\n    const indexes = Array.isArray(rowIndex) ? rowIndex : Array.from([rowIndex]);\n    return indexes.reduce((acc, index) => {\n      if (index >= 0 && index <= map.height - 1) {\n        const cells = map.cellsInRect({\n          left: 0,\n          right: map.width,\n          top: index,\n          bottom: index + 1\n        });\n        return acc.concat(\n          cells.map(nodePos => {\n            const node = table.node.nodeAt(nodePos);\n            const pos = nodePos + table.start;\n            return { pos, start: pos + 1, node };\n          })\n        );\n      }\n    }, []);\n  }\n};\n\n// :: (selection: Selection) → ?[{pos: number, start: number, node: ProseMirrorNode}]\n// Returns an array of all cells in a table.\n//\n// ```javascript\n// const cells = getCellsInTable(selection); // [{node, pos}, {node, pos}]\n// ```\nexport const getCellsInTable = selection => {\n  const table = findTable(selection);\n  if (table) {\n    const map = TableMap.get(table.node);\n    const cells = map.cellsInRect({\n      left: 0,\n      right: map.width,\n      top: 0,\n      bottom: map.height\n    });\n    return cells.map(nodePos => {\n      const node = table.node.nodeAt(nodePos);\n      const pos = nodePos + table.start;\n      return { pos, start: pos + 1, node };\n    });\n  }\n};\n\n// :: (columnIndex: number) → (tr: Transaction) → Transaction\n// Returns a new transaction that creates a `CellSelection` on a column at index `columnIndex`.\n//\n// ```javascript\n// dispatch(\n//   selectColumn(i)(state.tr)\n// );\n// ```\nexport const selectColumn = columnIndex => tr => {\n  const cells = getCellsInColumn(columnIndex)(tr.selection);\n  if (cells) {\n    const $anchor = tr.doc.resolve(cells[0].pos);\n    const $head = tr.doc.resolve(cells[cells.length - 1].pos);\n    return cloneTr(tr.setSelection(new CellSelection($anchor, $head)));\n  }\n  return tr;\n};\n\n// :: (rowIndex: number) → (tr: Transaction) → Transaction\n// Returns a new transaction that creates a `CellSelection` on a column at index `rowIndex`.\n//\n// ```javascript\n// dispatch(\n//   selectRow(i)(state.tr)\n// );\n// ```\nexport const selectRow = rowIndex => tr => {\n  const cells = getCellsInRow(rowIndex)(tr.selection);\n  if (cells) {\n    const $anchor = tr.doc.resolve(cells[0].pos);\n    const $head = tr.doc.resolve(cells[cells.length - 1].pos);\n    return cloneTr(tr.setSelection(new CellSelection($anchor, $head)));\n  }\n  return tr;\n};\n\n// :: (selection: Selection) → (tr: Transaction) → Transaction\n// Returns a new transaction that creates a `CellSelection` on the entire table.\n//\n// ```javascript\n// dispatch(\n//   selectTable(i)(state.tr)\n// );\n// ```\nexport const selectTable = tr => {\n  const cells = getCellsInTable(tr.selection);\n  if (cells) {\n    const $anchor = tr.doc.resolve(cells[0].pos);\n    const $head = tr.doc.resolve(cells[cells.length - 1].pos);\n    return cloneTr(tr.setSelection(new CellSelection($anchor, $head)));\n  }\n  return tr;\n};\n\n// :: (cell: {pos: number, node: ProseMirrorNode}, schema: Schema) → (tr: Transaction) → Transaction\n// Returns a new transaction that clears the content of a given `cell`.\n//\n// ```javascript\n// const $pos = state.doc.resolve(13);\n// dispatch(\n//   emptyCell(findCellClosestToPos($pos), state.schema)(state.tr)\n// );\n// ```\nexport const emptyCell = (cell, schema) => tr => {\n  if (cell) {\n    const content = tableNodeTypes(schema).cell.createAndFill().content;\n    if (!cell.node.content.eq(content)) {\n      tr.replaceWith(\n        cell.pos,\n        cell.pos + cell.node.nodeSize - 1,\n        new Slice(content, 0, 0)\n      );\n      return cloneTr(tr);\n    }\n  }\n  return tr;\n};\n\n// :: (columnIndex: number) → (tr: Transaction) → Transaction\n// Returns a new transaction that adds a new column at index `columnIndex`.\n//\n// ```javascript\n// dispatch(\n//   addColumnAt(i)(state.tr)\n// );\n// ```\nexport const addColumnAt = columnIndex => tr => {\n  const table = findTable(tr.selection);\n  if (table) {\n    const map = TableMap.get(table.node);\n    if (columnIndex >= 0 && columnIndex <= map.width) {\n      return cloneTr(\n        addColumn(\n          tr,\n          {\n            map,\n            tableStart: table.start,\n            table: table.node\n          },\n          columnIndex\n        )\n      );\n    }\n  }\n  return tr;\n};\n\n// :: (rowIndex: number, clonePreviousRow?: boolean) → (tr: Transaction) → Transaction\n// Returns a new transaction that adds a new row at index `rowIndex`. Optionally clone the previous row.\n//\n// ```javascript\n// dispatch(\n//   addRowAt(i)(state.tr)\n// );\n// ```\n//\n// ```javascript\n// dispatch(\n//   addRowAt(i, true)(state.tr)\n// );\n// ```\nexport const addRowAt = (rowIndex, clonePreviousRow) => tr => {\n  const table = findTable(tr.selection);\n  if (table) {\n    const map = TableMap.get(table.node);\n    const cloneRowIndex = rowIndex - 1;\n\n    if (clonePreviousRow && cloneRowIndex >= 0) {\n      return cloneTr(cloneRowAt(cloneRowIndex)(tr));\n    }\n\n    if (rowIndex >= 0 && rowIndex <= map.height) {\n      return cloneTr(\n        addRow(\n          tr,\n          {\n            map,\n            tableStart: table.start,\n            table: table.node\n          },\n          rowIndex\n        )\n      );\n    }\n  }\n  return tr;\n};\n\n// :: (cloneRowIndex: number) → (tr: Transaction) → Transaction\n// Returns a new transaction that adds a new row after `cloneRowIndex`, cloning the row attributes at `cloneRowIndex`.\n//\n// ```javascript\n// dispatch(\n//   cloneRowAt(i)(state.tr)\n// );\n// ```\nexport const cloneRowAt = rowIndex => tr => {\n  const table = findTable(tr.selection);\n  if (table) {\n    const map = TableMap.get(table.node);\n\n    if (rowIndex >= 0 && rowIndex <= map.height) {\n      const tableNode = table.node;\n      const tableNodes = tableNodeTypes(tableNode.type.schema);\n\n      let rowPos = table.start;\n      for (let i = 0; i < rowIndex + 1; i++) {\n        rowPos += tableNode.child(i).nodeSize;\n      }\n\n      const cloneRow = tableNode.child(rowIndex);\n      // Re-create the same nodes with same attrs, dropping the node content.\n      let cells = [];\n      let rowWidth = 0;\n      cloneRow.forEach(cell => {\n        // If we're copying a row with rowspan somewhere, we dont want to copy that cell\n        // We'll increment its span below.\n        if (cell.attrs.rowspan === 1) {\n          rowWidth += cell.attrs.colspan;\n          cells.push(\n            tableNodes[cell.type.spec.tableRole].createAndFill(\n              cell.attrs,\n              cell.marks\n            )\n          );\n        }\n      });\n\n      // If a higher row spans past our clone row, bump the higher row to cover this new row too.\n      if (rowWidth < map.width) {\n        let rowSpanCells = [];\n        for (let i = rowIndex; i >= 0; i--) {\n          let foundCells = filterCellsInRow(i, (cell, tr) => {\n            const rowspan = cell.node.attrs.rowspan;\n            const spanRange = i + rowspan;\n            return rowspan > 1 && spanRange > rowIndex;\n          })(tr);\n          rowSpanCells.push(...foundCells);\n        }\n\n        if (rowSpanCells.length) {\n          rowSpanCells.forEach(cell => {\n            tr = setCellAttrs(cell, {\n              rowspan: cell.node.attrs.rowspan + 1\n            })(tr);\n          });\n        }\n      }\n\n      return safeInsert(tableNodes.row.create(cloneRow.attrs, cells), rowPos)(\n        tr\n      );\n    }\n  }\n  return tr;\n};\n\n// :: (columnIndex: number) → (tr: Transaction) → Transaction\n// Returns a new transaction that removes a column at index `columnIndex`. If there is only one column left, it will remove the entire table.\n//\n// ```javascript\n// dispatch(\n//   removeColumnAt(i)(state.tr)\n// );\n// ```\nexport const removeColumnAt = columnIndex => tr => {\n  const table = findTable(tr.selection);\n  if (table) {\n    const map = TableMap.get(table.node);\n    if (columnIndex === 0 && map.width === 1) {\n      return removeTable(tr);\n    } else if (columnIndex >= 0 && columnIndex <= map.width) {\n      removeColumn(\n        tr,\n        {\n          map,\n          tableStart: table.start,\n          table: table.node\n        },\n        columnIndex\n      );\n      return cloneTr(tr);\n    }\n  }\n  return tr;\n};\n\n// :: (rowIndex: number) → (tr: Transaction) → Transaction\n// Returns a new transaction that removes a row at index `rowIndex`. If there is only one row left, it will remove the entire table.\n//\n// ```javascript\n// dispatch(\n//   removeRowAt(i)(state.tr)\n// );\n// ```\nexport const removeRowAt = rowIndex => tr => {\n  const table = findTable(tr.selection);\n  if (table) {\n    const map = TableMap.get(table.node);\n    if (rowIndex === 0 && map.height === 1) {\n      return removeTable(tr);\n    } else if (rowIndex >= 0 && rowIndex <= map.height) {\n      removeRow(\n        tr,\n        {\n          map,\n          tableStart: table.start,\n          table: table.node\n        },\n        rowIndex\n      );\n      return cloneTr(tr);\n    }\n  }\n  return tr;\n};\n\n// :: (tr: Transaction) → Transaction\n// Returns a new transaction that removes a table node if the cursor is inside of it.\n//\n// ```javascript\n// dispatch(\n//   removeTable(state.tr)\n// );\n// ```\nexport const removeTable = tr => {\n  const { $from } = tr.selection;\n  for (let depth = $from.depth; depth > 0; depth--) {\n    let node = $from.node(depth);\n    if (node.type.spec.tableRole === 'table') {\n      return cloneTr(tr.delete($from.before(depth), $from.after(depth)));\n    }\n  }\n  return tr;\n};\n\n// :: (tr: Transaction) → Transaction\n// Returns a new transaction that removes selected columns.\n//\n// ```javascript\n// dispatch(\n//   removeSelectedColumns(state.tr)\n// );\n// ```\nexport const removeSelectedColumns = tr => {\n  const { selection } = tr;\n  if (isTableSelected(selection)) {\n    return removeTable(tr);\n  }\n  if (isCellSelection(selection)) {\n    const table = findTable(selection);\n    if (table) {\n      const map = TableMap.get(table.node);\n      const rect = map.rectBetween(\n        selection.$anchorCell.pos - table.start,\n        selection.$headCell.pos - table.start\n      );\n\n      if (rect.left == 0 && rect.right == map.width) {\n        return false;\n      }\n\n      const pmTableRect = Object.assign({}, rect, {\n        map,\n        table: table.node,\n        tableStart: table.start\n      });\n\n      for (let i = pmTableRect.right - 1; ; i--) {\n        removeColumn(tr, pmTableRect, i);\n        if (i === pmTableRect.left) {\n          break;\n        }\n        pmTableRect.table = pmTableRect.tableStart\n          ? tr.doc.nodeAt(pmTableRect.tableStart - 1)\n          : tr.doc;\n        pmTableRect.map = TableMap.get(pmTableRect.table);\n      }\n      return cloneTr(tr);\n    }\n  }\n  return tr;\n};\n\n// :: (tr: Transaction) → Transaction\n// Returns a new transaction that removes selected rows.\n//\n// ```javascript\n// dispatch(\n//   removeSelectedRows(state.tr)\n// );\n// ```\nexport const removeSelectedRows = tr => {\n  const { selection } = tr;\n  if (isTableSelected(selection)) {\n    return removeTable(tr);\n  }\n  if (isCellSelection(selection)) {\n    const table = findTable(selection);\n    if (table) {\n      const map = TableMap.get(table.node);\n      const rect = map.rectBetween(\n        selection.$anchorCell.pos - table.start,\n        selection.$headCell.pos - table.start\n      );\n\n      if (rect.top == 0 && rect.bottom == map.height) {\n        return false;\n      }\n\n      const pmTableRect = Object.assign({}, rect, {\n        map,\n        table: table.node,\n        tableStart: table.start\n      });\n\n      for (let i = pmTableRect.bottom - 1; ; i--) {\n        removeRow(tr, pmTableRect, i);\n        if (i === pmTableRect.top) {\n          break;\n        }\n        pmTableRect.table = pmTableRect.tableStart\n          ? tr.doc.nodeAt(pmTableRect.tableStart - 1)\n          : tr.doc;\n        pmTableRect.map = TableMap.get(pmTableRect.table);\n      }\n\n      return cloneTr(tr);\n    }\n  }\n  return tr;\n};\n\n// :: ($pos: ResolvedPos) → (tr: Transaction) → Transaction\n// Returns a new transaction that removes a column closest to a given `$pos`.\n//\n// ```javascript\n// dispatch(\n//   removeColumnClosestToPos(state.doc.resolve(3))(state.tr)\n// );\n// ```\nexport const removeColumnClosestToPos = $pos => tr => {\n  const rect = findCellRectClosestToPos($pos);\n  if (rect) {\n    return removeColumnAt(rect.left)(setTextSelection($pos.pos)(tr));\n  }\n  return tr;\n};\n\n// :: ($pos: ResolvedPos) → (tr: Transaction) → Transaction\n// Returns a new transaction that removes a row closest to a given `$pos`.\n//\n// ```javascript\n// dispatch(\n//   removeRowClosestToPos(state.doc.resolve(3))(state.tr)\n// );\n// ```\nexport const removeRowClosestToPos = $pos => tr => {\n  const rect = findCellRectClosestToPos($pos);\n  if (rect) {\n    return removeRowAt(rect.top)(setTextSelection($pos.pos)(tr));\n  }\n  return tr;\n};\n\n// :: (columnIndex: number, cellTransform: (cell: {pos: number, start: number, node: ProseMirrorNode}, tr: Transaction) → Transaction, setCursorToLastCell: ?boolean) → (tr: Transaction) → Transaction\n// Returns a new transaction that maps a given `cellTransform` function to each cell in a column at a given `columnIndex`.\n// It will set the selection into the last cell of the column if `setCursorToLastCell` param is set to `true`.\n//\n// ```javascript\n// dispatch(\n//   forEachCellInColumn(0, (cell, tr) => emptyCell(cell, state.schema)(tr))(state.tr)\n// );\n// ```\nexport const forEachCellInColumn = (\n  columnIndex,\n  cellTransform,\n  setCursorToLastCell\n) => tr => {\n  const cells = getCellsInColumn(columnIndex)(tr.selection);\n  if (cells) {\n    for (let i = cells.length - 1; i >= 0; i--) {\n      tr = cellTransform(cells[i], tr);\n    }\n    if (setCursorToLastCell) {\n      const $pos = tr.doc.resolve(tr.mapping.map(cells[cells.length - 1].pos));\n      tr.setSelection(Selection.near($pos));\n    }\n    return cloneTr(tr);\n  }\n  return tr;\n};\n\n// :: (rowIndex: number, cellTransform: (cell: {pos: number, start: number, node: ProseMirrorNode}, tr: Transaction) → Transaction, setCursorToLastCell: ?boolean) → (tr: Transaction) → Transaction\n// Returns a new transaction that maps a given `cellTransform` function to each cell in a row at a given `rowIndex`.\n// It will set the selection into the last cell of the row if `setCursorToLastCell` param is set to `true`.\n//\n// ```javascript\n// dispatch(\n//   forEachCellInRow(0, (cell, tr) => setCellAttrs(cell, { background: 'red' })(tr))(state.tr)\n// );\n// ```\nexport const forEachCellInRow = (\n  rowIndex,\n  cellTransform,\n  setCursorToLastCell\n) => tr => {\n  const cells = getCellsInRow(rowIndex)(tr.selection);\n  if (cells) {\n    for (let i = cells.length - 1; i >= 0; i--) {\n      tr = cellTransform(cells[i], tr);\n    }\n    if (setCursorToLastCell) {\n      const $pos = tr.doc.resolve(tr.mapping.map(cells[cells.length - 1].pos));\n      tr.setSelection(Selection.near($pos));\n    }\n  }\n  return tr;\n};\n\n// :: (cell: {pos: number, start: number, node: ProseMirrorNode}, attrs: Object) → (tr: Transaction) → Transaction\n// Returns a new transaction that sets given `attrs` to a given `cell`.\n//\n// ```javascript\n// dispatch(\n//   setCellAttrs(findCellClosestToPos($pos), { background: 'blue' })(tr);\n// );\n// ```\nexport const setCellAttrs = (cell, attrs) => tr => {\n  if (cell) {\n    tr.setNodeMarkup(cell.pos, null, Object.assign({}, cell.node.attrs, attrs));\n    return cloneTr(tr);\n  }\n  return tr;\n};\n\n// :: (schema: Schema, rowsCount: ?number, colsCount: ?number, withHeaderRow: ?boolean, cellContent: ?Node) → Node\n// Returns a table node of a given size.\n// `withHeaderRow` defines whether the first row of the table will be a header row.\n// `cellContent` defines the content of each cell.\n//\n// ```javascript\n// const table = createTable(state.schema); // 3x3 table node\n// dispatch(\n//   tr.replaceSelectionWith(table).scrollIntoView()\n// );\n// ```\nexport const createTable = (\n  schema,\n  rowsCount = 3,\n  colsCount = 3,\n  withHeaderRow = true,\n  cellContent = null\n) => {\n  const {\n    cell: tableCell,\n    header_cell: tableHeader,\n    row: tableRow,\n    table\n  } = tableNodeTypes(schema);\n\n  const cells = [];\n  const headerCells = [];\n  for (let i = 0; i < colsCount; i++) {\n    cells.push(createCell(tableCell, cellContent));\n\n    if (withHeaderRow) {\n      headerCells.push(createCell(tableHeader, cellContent));\n    }\n  }\n\n  const rows = [];\n  for (let i = 0; i < rowsCount; i++) {\n    rows.push(\n      tableRow.createChecked(\n        null,\n        withHeaderRow && i === 0 ? headerCells : cells\n      )\n    );\n  }\n\n  return table.createChecked(null, rows);\n};\n\n// :: ($pos: ResolvedPos) → ?{pos: number, start: number, node: ProseMirrorNode}\n// Iterates over parent nodes, returning a table cell or a table header node closest to a given `$pos`.\n//\n// ```javascript\n// const cell = findCellClosestToPos(state.selection.$from);\n// ```\nexport const findCellClosestToPos = $pos => {\n  const predicate = node =>\n    node.type.spec.tableRole && /cell/i.test(node.type.spec.tableRole);\n  return findParentNodeClosestToPos($pos, predicate);\n};\n\n// :: ($pos: ResolvedPos) → ?{left: number, top: number, right: number, bottom: number}\n// Returns the rectangle spanning a cell closest to a given `$pos`.\n//\n// ```javascript\n// dispatch(\n//   findCellRectClosestToPos(state.selection.$from)\n// );\n// ```\nexport const findCellRectClosestToPos = $pos => {\n  const cell = findCellClosestToPos($pos);\n  if (cell) {\n    const table = findTableClosestToPos($pos);\n    const map = TableMap.get(table.node);\n    const cellPos = cell.pos - table.start;\n    return map.rectBetween(cellPos, cellPos);\n  }\n};\n\nconst filterCellsInRow = (rowIndex, predicate) => tr => {\n  let foundCells = [];\n  const cells = getCellsInRow(rowIndex)(tr.selection);\n  if (cells) {\n    for (let j = cells.length - 1; j >= 0; j--) {\n      if (predicate(cells[j], tr)) {\n        foundCells.push(cells[j]);\n      }\n    }\n  }\n\n  return foundCells;\n};\n\n// :: (columnIndex: number) → (tr: Transaction) → {$anchor: ResolvedPos, $head: ResolvedPos, indexes: [number]}\n// Returns a range of rectangular selection spanning all merged cells around a column at index `columnIndex`.\n//\n// ```javascript\n// const range = getSelectionRangeInColumn(3)(state.tr);\n// ```\nexport const getSelectionRangeInColumn = columnIndex => tr => {\n  let startIndex = columnIndex;\n  let endIndex = columnIndex;\n\n  // looking for selection start column (startIndex)\n  for (let i = columnIndex; i >= 0; i--) {\n    const cells = getCellsInColumn(i)(tr.selection);\n    cells.forEach(cell => {\n      let maybeEndIndex = cell.node.attrs.colspan + i - 1;\n      if (maybeEndIndex >= startIndex) {\n        startIndex = i;\n      }\n      if (maybeEndIndex > endIndex) {\n        endIndex = maybeEndIndex;\n      }\n    });\n  }\n  // looking for selection end column (endIndex)\n  for (let i = columnIndex; i <= endIndex; i++) {\n    const cells = getCellsInColumn(i)(tr.selection);\n    cells.forEach(cell => {\n      let maybeEndIndex = cell.node.attrs.colspan + i - 1;\n      if (cell.node.attrs.colspan > 1 && maybeEndIndex > endIndex) {\n        endIndex = maybeEndIndex;\n      }\n    });\n  }\n\n  // filter out columns without cells (where all rows have colspan > 1 in the same column)\n  const indexes = [];\n  for (let i = startIndex; i <= endIndex; i++) {\n    const maybeCells = getCellsInColumn(i)(tr.selection);\n    if (maybeCells && maybeCells.length) {\n      indexes.push(i);\n    }\n  }\n  startIndex = indexes[0];\n  endIndex = indexes[indexes.length - 1];\n\n  const firstSelectedColumnCells = getCellsInColumn(startIndex)(tr.selection);\n  const firstRowCells = getCellsInRow(0)(tr.selection);\n  const $anchor = tr.doc.resolve(\n    firstSelectedColumnCells[firstSelectedColumnCells.length - 1].pos\n  );\n\n  let headCell;\n  for (let i = endIndex; i >= startIndex; i--) {\n    const columnCells = getCellsInColumn(i)(tr.selection);\n    if (columnCells && columnCells.length) {\n      for (let j = firstRowCells.length - 1; j >= 0; j--) {\n        if (firstRowCells[j].pos === columnCells[0].pos) {\n          headCell = columnCells[0];\n          break;\n        }\n      }\n      if (headCell) {\n        break;\n      }\n    }\n  }\n\n  const $head = tr.doc.resolve(headCell.pos);\n  return { $anchor, $head, indexes };\n};\n\n// :: (rowIndex: number) → (tr: Transaction) → {$anchor: ResolvedPos, $head: ResolvedPos, indexes: [number]}\n// Returns a range of rectangular selection spanning all merged cells around a row at index `rowIndex`.\n//\n// ```javascript\n// const range = getSelectionRangeInRow(3)(state.tr);\n// ```\nexport const getSelectionRangeInRow = rowIndex => tr => {\n  let startIndex = rowIndex;\n  let endIndex = rowIndex;\n  // looking for selection start row (startIndex)\n  for (let i = rowIndex; i >= 0; i--) {\n    const cells = getCellsInRow(i)(tr.selection);\n    cells.forEach(cell => {\n      let maybeEndIndex = cell.node.attrs.rowspan + i - 1;\n      if (maybeEndIndex >= startIndex) {\n        startIndex = i;\n      }\n      if (maybeEndIndex > endIndex) {\n        endIndex = maybeEndIndex;\n      }\n    });\n  }\n  // looking for selection end row (endIndex)\n  for (let i = rowIndex; i <= endIndex; i++) {\n    const cells = getCellsInRow(i)(tr.selection);\n    cells.forEach(cell => {\n      let maybeEndIndex = cell.node.attrs.rowspan + i - 1;\n      if (cell.node.attrs.rowspan > 1 && maybeEndIndex > endIndex) {\n        endIndex = maybeEndIndex;\n      }\n    });\n  }\n\n  // filter out rows without cells (where all columns have rowspan > 1 in the same row)\n  const indexes = [];\n  for (let i = startIndex; i <= endIndex; i++) {\n    const maybeCells = getCellsInRow(i)(tr.selection);\n    if (maybeCells && maybeCells.length) {\n      indexes.push(i);\n    }\n  }\n  startIndex = indexes[0];\n  endIndex = indexes[indexes.length - 1];\n\n  const firstSelectedRowCells = getCellsInRow(startIndex)(tr.selection);\n  const firstColumnCells = getCellsInColumn(0)(tr.selection);\n  const $anchor = tr.doc.resolve(\n    firstSelectedRowCells[firstSelectedRowCells.length - 1].pos\n  );\n\n  let headCell;\n  for (let i = endIndex; i >= startIndex; i--) {\n    const rowCells = getCellsInRow(i)(tr.selection);\n    if (rowCells && rowCells.length) {\n      for (let j = firstColumnCells.length - 1; j >= 0; j--) {\n        if (firstColumnCells[j].pos === rowCells[0].pos) {\n          headCell = rowCells[0];\n          break;\n        }\n      }\n      if (headCell) {\n        break;\n      }\n    }\n  }\n\n  const $head = tr.doc.resolve(headCell.pos);\n  return { $anchor, $head, indexes };\n};\n"],"names":["removeParentNodeOfType","parent","findParentNodeOfType","nodeType","tr","selection","removeNodeAtPos","pos","replaceParentNodeOfType","content","Array","isArray","i","count","length","newTr","replaceNodeAtPos","removeSelectedNode","isNodeSelection","from","$from","to","$to","cloneTr","delete","replaceSelectedNode","canReplaceWith","index","indexAfter","node","type","replaceWith","setTextSelection","position","dir","nextSelection","Selection","findFrom","doc","resolve","setSelection","safeInsert","hasPosition","$insertPos","depth","isEmptyParagraph","oldTr","canInsert","insert","$anchor","after","$pos","setParentNodeMarkup","attrs","marks","setNodeMarkup","Object","assign","selectParentNodeOfType","NodeSelection","create","removeNodeBefore","findPositionOfNodeBefore","equalNodeType","indexOf","setTime","Date","now","nodeAt","canReplace","nodeSize","start","Math","max","validContent","Fragment","tableNodeTypes","schema","cached","roles","keys","nodes","forEach","spec","tableRole","PMNode","name","findTableClosestToPos","predicate","test","findParentNodeClosestToPos","createCell","cellType","cellContent","createChecked","createAndFill","isRectSelected","map","TableMap","get","$anchorCell","cells","cellsInRect","rect","selectedCells","rectBetween","$headCell","findParentNode","before","findParentDomRef","domAtPos","findDomRefAtPos","hasParentNode","findParentNodeOfTypeClosestToPos","hasParentNodeOfType","findParentDomRefOfType","findSelectedNodeOfType","nodeBefore","maybeSelection","dom","childNodes","offset","Node","TEXT_NODE","parentNode","flatten","descend","Error","result","descendants","child","push","findChildren","filter","findTextNodes","isText","findInlineNodes","isInline","findBlockNodes","isBlock","findChildrenByAttr","findChildrenByType","findChildrenByMark","markType","isInSet","contains","findTable","isCellSelection","CellSelection","getSelectionRect","isColumnSelected","columnIndex","height","isRowSelected","width","rowIndex","isTableSelected","getCellsInColumn","table","indexes","reduce","acc","concat","nodePos","getCellsInRow","getCellsInTable","selectColumn","$head","selectRow","selectTable","emptyCell","cell","eq","Slice","addColumnAt","addColumn","addRowAt","clonePreviousRow","cloneRowIndex","cloneRowAt","addRow","tableNode","tableNodes","rowPos","cloneRow","rowWidth","rowspan","colspan","rowSpanCells","foundCells","filterCellsInRow","spanRange","setCellAttrs","row","removeColumnAt","removeTable","removeRowAt","removeSelectedColumns","left","right","pmTableRect","tableStart","removeSelectedRows","top","bottom","removeColumnClosestToPos","findCellRectClosestToPos","removeRowClosestToPos","forEachCellInColumn","cellTransform","setCursorToLastCell","mapping","near","forEachCellInRow","createTable","rowsCount","colsCount","withHeaderRow","tableCell","tableHeader","header_cell","tableRow","headerCells","rows","findCellClosestToPos","cellPos","j","getSelectionRangeInColumn","startIndex","endIndex","maybeEndIndex","maybeCells","firstSelectedColumnCells","firstRowCells","headCell","columnCells","getSelectionRangeInRow","firstSelectedRowCells","firstColumnCells","rowCells"],"mappings":"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"}